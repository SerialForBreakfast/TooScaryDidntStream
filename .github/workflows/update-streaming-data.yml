name: Production Deployment

on:
  # Run when movies.json is updated
  push:
    paths:
      - 'data/movies.json'
    branches:
      - main

  # Daily incremental updates and weekly full refresh
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
    - cron: '0 6 * * 0'  # Weekly on Sundays at 6 AM UTC

  # Allow manual triggering
  workflow_dispatch:

jobs:
  update-streaming-data:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests

    - name: Fetch streaming data (TMDB only)
      env:
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      run: |
        python scripts/fetch_streaming_info.py

    - name: Cache movie posters (production)
      env:
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      run: |
        python scripts/cache_movie_posters.py

    - name: Generate HTML
      run: |
        python scripts/generate_movie_browser.py

    - name: Commit and push if changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/streaming_data.json output/index.html output/posters/ output/poster_manifest.json

        # Only commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -m "Auto-update streaming data - $(date -u +"%Y-%m-%d %H:%M UTC")"
          git push
        else
          echo "No changes to commit"
        fi

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./output
        publish_branch: gh-pages

    - name: Create production deployment
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false,
            required_contexts: []
          }); 