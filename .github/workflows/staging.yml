name: Staging Environment

on:
  # Run on pull requests to main branch
  pull_request:
    branches:
      - main
    paths:
      - 'data/**'
      - 'scripts/**'
      - '.github/workflows/**'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - preview

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Comment deployment start
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: '🚀 **Staging deployment started** for this PR. Building movie browser with poster caching... ⏳'
          });
    
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # For PRs, checkout the PR branch
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests

    - name: Validate data format
      run: |
        python -c "
        import json
        with open('data/movies.json', 'r') as f:
            data = json.load(f)
        print(f'✅ Validated {len(data.get(\"episodes\", []))} episodes')
        "

    - name: Fetch streaming data (staging)
      env:
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      run: |
        python scripts/fetch_streaming_info.py

    - name: Cache movie posters (staging)
      env:
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      run: |
        python scripts/cache_movie_posters.py

    - name: Generate HTML (staging)
      run: |
        python scripts/generate_movie_browser.py

    - name: Upload staging artifacts
      uses: actions/upload-artifact@v4
      with:
        name: staging-build-${{ github.event.pull_request.number }}
        path: |
          output/
          data/streaming_data.json
        retention-days: 7

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Download staging artifacts
      uses: actions/download-artifact@v4
      with:
        name: staging-build-${{ github.event.pull_request.number }}

    - name: Deploy staging to GitHub Pages (fixed approach)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./output
        publish_branch: gh-pages
        destination_dir: staging/pr-${{ github.event.pull_request.number }}
        keep_files: true

    - name: Set staging URL (that actually works)
      run: |
        STAGING_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/staging/pr-${{ github.event.pull_request.number }}/index.html"
        echo "STAGING_URL=$STAGING_URL" >> $GITHUB_ENV
        echo "🚀 Staging deployed to: $STAGING_URL"

    - name: Create staging deployment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: deployments } = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            environment: 'staging'
          });
          
          if (deployments.length > 0) {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployments[0].id,
              state: 'success',
              environment_url: '${{ env.STAGING_URL }}',
              description: 'PR-specific staging deployment successful'
            });
          }

    - name: Generate PR Summary
      if: github.event_name == 'pull_request'
      run: |
        echo "Checking repository structure..."
        ls -la
        echo ""
        echo "Checking for PR summary script..."
        if [ -d "scripts" ]; then
          ls -la scripts/
          echo ""
          if [ -f "scripts/generate_pr_summary.py" ]; then
            echo "Script found, generating summary..."
            python scripts/generate_pr_summary.py > pr_summary.txt
            echo "Summary generated successfully"
          else
            echo "Script not found, creating fallback summary..."
            echo "# 📊 Change Summary" > pr_summary.txt
            echo "" >> pr_summary.txt
            echo "## 🔗 Site Links" >> pr_summary.txt
            echo "- **Production:** https://serialforbreakfast.github.io/TooScaryDidntStream/output/index.html" >> pr_summary.txt
            echo "- **Staging:** https://serialforbreakfast.github.io/TooScaryDidntStream/staging/pr-${{ github.event.pull_request.number }}/" >> pr_summary.txt
            echo "" >> pr_summary.txt
            echo "## 📁 Files Changed" >> pr_summary.txt
            echo "PR summary script not available. Please check the changes manually." >> pr_summary.txt
            echo "Fallback summary created"
          fi
        else
          echo "Scripts directory not found, creating fallback summary..."
          echo "# 📊 Change Summary" > pr_summary.txt
          echo "" >> pr_summary.txt
          echo "## 🔗 Site Links" >> pr_summary.txt
          echo "- **Production:** https://serialforbreakfast.github.io/TooScaryDidntStream/output/index.html" >> pr_summary.txt
          echo "- **Staging:** https://serialforbreakfast.github.io/TooScaryDidntStream/staging/pr-${{ github.event.pull_request.number }}/" >> pr_summary.txt
          echo "" >> pr_summary.txt
          echo "## 📁 Files Changed" >> pr_summary.txt
          echo "Scripts directory not available. Please check the changes manually." >> pr_summary.txt
          echo "Fallback summary created"
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let summary = '';
          try {
            summary = fs.readFileSync('pr_summary.txt', 'utf8');
          } catch (e) {
            summary = 'Could not generate summary';
          }
          
          const comment = `## 🚀 PR-Specific Staging Deployment Complete
          
          ### 🔗 Direct Links
          
          **🎬 Staging Movie Browser:** ${{ env.STAGING_URL }}
          
          **📱 Production Movie Browser:** https://serialforbreakfast.github.io/TooScaryDidntStream/
          
          ### 📊 Before & After Comparison
          
          | Environment | Link | Description |
          |-------------|------|-------------|
          | 🟢 **Production** | [Current Live Site](https://serialforbreakfast.github.io/TooScaryDidntStream/) | Current production version |
          | 🟡 **Staging** | [PR Preview](${{ env.STAGING_URL }}) | Your changes with TMDB API access |
          
          ### 🧪 How to Test Staging Preview
          
          1. **Visit**: Click the "Staging Movie Browser" link above
          2. **Test**: Live staging site with your PR changes and TMDB API access
          3. **Compare**: Compare functionality with production site
          4. **Verify**: Use the checklist below to ensure everything works
          
          ### 📋 Testing Checklist
          
          - [ ] Movie browser loads correctly
          - [ ] Streaming service filters work
          - [ ] Search functionality works
          - [ ] Movie posters display properly
          - [ ] Responsive design works on mobile
          - [ ] Streaming service links are clickable
          
          ### 📈 Change Summary
          
          ${summary}
          
          ### 🎯 Next Steps
          
          1. **Test the staging version** using the links above
          2. **Compare with production** to verify your changes
          3. **Complete the testing checklist** 
          4. **Request review** when ready
          5. **Merge to deploy** to production
          
          ### ⏱️ Note
          
          Staging URLs may take 2-5 minutes to become accessible after deployment due to GitHub Pages propagation.
          
          ---
          *🤖 Automated staging deployment for PR #${{ github.event.pull_request.number }} | Built with TMDB poster caching*`;
          
          // Check for existing deployment comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('PR-Specific Staging Deployment Complete') &&
            comment.body.includes(`pr-${{ github.event.pull_request.number }}`)
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  notify-failure:
    if: failure() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging]
    
    steps:
    - name: Comment deployment failure
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `❌ **Staging deployment failed** for PR #${{ github.event.pull_request.number }}
            
            Please check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
            
            Common issues:
            - Data validation errors
            - TMDB API issues
            - Build script errors
            
            Try pushing a new commit to re-trigger the deployment.`
          });

  cleanup-staging:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: Cleanup staging subdirectory
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            // Create empty staging directory to remove the PR-specific subdirectory
            fs.mkdirSync('cleanup', { recursive: true });
            fs.writeFileSync('cleanup/.gitkeep', '# Cleaning up staging directory');
            
            console.log('✅ Prepared cleanup directory');
          } catch (error) {
            console.log(`⚠️ Could not prepare cleanup: ${error.message}`);
          }

    - name: Remove staging subdirectory from gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./cleanup
        publish_branch: gh-pages
        destination_dir: staging/pr-${{ github.event.pull_request.number }}
        keep_files: true

    - name: Cleanup staging files
      run: |
        echo "🧹 Cleaned up staging subdirectory for PR #${{ github.event.pull_request.number }}"
        echo "Staging files removed from /staging/pr-${{ github.event.pull_request.number }}/"

    - name: Cleanup staging artifacts
      uses: actions/github-script@v7
      with:
        script: |
          // Delete PR-specific staging artifacts when PR is closed
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          for (const artifact of artifacts.artifacts) {
            if (artifact.name === `staging-build-${{ github.event.pull_request.number }}`) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
          } 