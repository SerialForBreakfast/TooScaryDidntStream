name: Development Testing

on:
  # Run on pushes to development branches
  push:
    branches:
      - develop
      - feature/*
      - bugfix/*
    paths:
      - 'data/**'
      - 'scripts/**'

  # Allow manual triggering
  workflow_dispatch:

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests

    - name: Validate data format
      run: |
        python -c "
        import json
        try:
            with open('data/movies.json', 'r') as f:
                data = json.load(f)
            episodes = data.get('episodes', [])
            print(f'‚úÖ Validated {len(episodes)} episodes')
            
            # Check for common data issues
            for i, episode in enumerate(episodes):
                if not episode.get('title'):
                    print(f'‚ö†Ô∏è  Episode {i+1} missing title')
                if not episode.get('movies'):
                    print(f'‚ö†Ô∏è  Episode {i+1} has no movies')
                    
        except Exception as e:
            print(f'‚ùå Data validation failed: {e}')
            exit(1)
        "

    - name: Test poster caching
      env:
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      run: |
        # Test poster caching (limit to 5 movies for dev testing)
        python -c "
        import sys
        sys.path.append('scripts')
        from cache_movie_posters import PosterCacheManager
        
        cache_manager = PosterCacheManager()
        cache_manager.load_data()
        movies = cache_manager.get_all_movies_with_tmdb_ids()[:5]  # Limit for testing
        
        if cache_manager.tmdb_api_key:
            cache_manager.create_cache_directory()
            print(f'Testing poster cache with {len(movies)} movies...')
        else:
            print('No TMDB API key - skipping poster cache test')
        "

    - name: Test HTML generation
      run: |
        python scripts/generate_movie_browser.py
        
        # Check if HTML was generated
        if [ -f "output/index.html" ]; then
          echo "‚úÖ HTML generation successful"
          echo "üìä File size: $(wc -c < output/index.html) bytes"
        else
          echo "‚ùå HTML generation failed"
          exit 1
        fi

    - name: Test responsive design
      run: |
        # Check for responsive CSS
        if grep -q "@media" output/index.html; then
          echo "‚úÖ Responsive CSS found"
        else
          echo "‚ö†Ô∏è  No responsive CSS detected"
        fi
        
        # Check for movie cards and posters
        movie_count=$(grep -c "movie-card" output/index.html || echo "0")
        poster_count=$(grep -c "movie-poster" output/index.html || echo "0")
        echo "üé¨ Found $movie_count movie cards with $poster_count posters"

    - name: Upload development artifacts
      uses: actions/upload-artifact@v4
      with:
        name: development-build-${{ github.sha }}
        path: |
          output/
          data/streaming_data.json
        retention-days: 3

    - name: Comment on commit
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üß™ Development Testing Complete
          
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          **Results:**
          - ‚úÖ Data validation passed
          - ‚úÖ HTML generation successful
          - ‚úÖ Responsive design implemented
          
          **Artifacts:** Available for download in Actions tab
          
          ---
          *This is an automated development test*`;
          
          // Only comment on PRs
          if (context.payload.pull_request) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
          } 